@model Bs.Calendar.Mvc.ViewModels.RoomEditVm
@{
    var btnName = "Create";
    var id = 0;
    var roomName = "New room";
    var defaultColor = 0;
    var numberOfPlaces = "";
    
    if (Model != null && Model.RoomId != 0)
    {
        numberOfPlaces = Model.NumberOfPlaces.ToString();   
        defaultColor = Model.Color;
        btnName = "Update";
        id = Model.RoomId;
        roomName = Model.Name;
        ViewBag.Title = "Edit Room";
    }
    else
    {
        ViewBag.Title = "Create Room";
        ViewBag.User = "New Room";
    }
}

<div class="row">
    <div class="centered seven columns default alert">
        <h4 class="centered four columns">@ViewBag.Title</h4>
    </div>
</div>

<div class="row">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(room => room.RoomId)
        <div class="centered seven columns">
            @Html.ValidationSummary()
        </div>

        <div class="row">
            <fieldset class="centered seven columns">
                <legend>
                    <h4>@roomName</h4>
                </legend>
                              
                <ul>
                    <li class="field">
                        @Html.LabelFor(room => room.Name, new {@class = "inline"})
                        @Html.TextBoxFor(room => room.Name, new {@class = "wide text input pull_right"})
                    </li>

                    <li class="field">
                        @Html.LabelFor(room => room.NumberOfPlaces, new {@class = "inline"})
                        <input class="wide text input pull_right" data-val="true" data-val-number="The field Number of places must be a number." data-val-range="Value is out of allowed range" data-val-range-max="2147483647" data-val-range-min="1" data-val-required="Number of places should be specified" id="NumberOfPlaces" name="NumberOfPlaces" type="number" value="@numberOfPlaces">
                    </li>

                    <li class="field">
                        @Html.LabelFor(room => room.Color, new {@class = "inline"})
                        <input class="input-validation-error" data-val="true" data-val-required="Color should be selected" id="Color" name="Color" type="hidden" value="@defaultColor">
                        <div class="pull_right">
                            <ul>
                                @for (var i = 0; i < 7; ++i)
                                {
                                    var colorClasses = String.Format("roomColor roomColor_{0}", i);
                                    if (i == defaultColor)
                                    {
                                        colorClasses += " roomColorSelected";
                                    }
                                    <li class ="@colorClasses" id="color_@i" onclick="select_color(@i)"></li>
                                }
                            </ul>
                        </div>
                    </li>
                </ul>
                <div class="medium secondary btn three columns">
                    <input type="submit" value="@btnName"/>
                </div>

                <div class="medium default btn push_one three columns">
                    @Html.ActionLink("Back", "Index")
                </div>
            
                @if (id != 0)
                {
                    <div class="medium info btn three columns push_one">
                        @Html.ActionLink("Delete", "Delete", new {id})
                    </div>
                }  
            </fieldset>
        </div>
    }
</div>