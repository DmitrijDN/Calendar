@using Bs.Calendar.Mvc.ViewModels

@{
    ViewBag.Title = "Users";
}

<div class="row">
    <div class="centered seven columns default alert">
        <h4 class="centered two columns">@ViewBag.Title</h4>
    </div>
</div>
    

<div class="row">
    <div class="one columns">
        <button class="medium primary btn">@Html.ActionLink("Create", "Create")</button>
    </div>
        
    <div class="field push_eight three columns">
        <input class="search input" type="text" name="searchStr" placeholder="Find user" data-bind="value: model.SearchStr, event: { change: changeHandler }"/>
    </div>
</div>
      
<div class="row">
    <table>
        <thead>
            <tr>
                <th><a href="~" id="th-name" data-bind="click: headerClick">Name</a></th>
                <th><a href="~" id="th-email" data-bind="click: headerClick">E-mail</a></th>
                <th>Role</th>
                <th>Action</th>
            </tr>
        </thead>
    
        <tbody id="list-body">
            @Html.Action("List", @Session["pagingVm"] ?? new PagingVm())
        </tbody>
    </table>
</div>

<div class="row" data-bind="visible : model.TotalPages() > 0">
    <div class="two columns">
        <div class="field">
            <input class="text input" type="text" name="PagingVm.Page" data-bind="value: model.Page, event: { change: changeHandler }">
        </div>
    </div>
            
    <div class="two columns default alert" data-bind="text : 'of ' + model.TotalPages()">
       
    </div>

    <div class="primary label push_four two columns">
        <a href="~" data-bind="click: previousPage">Previous</a>
    </div>

    <div class="primary label two columns">
        <a href="~" data-bind="click : nextPage">Next</a>
    </div>
</div>

@section styles {
    <link href="@Url.Content("~/Content/Layout/list-view.css")" rel="stylesheet"/>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryajax")
    <script src="../../Scripts/Users/UserList.js"></script>

    <script type="text/javascript">
        $(document).ready(function () {
            var model = new ViewModel();
            ko.applyBindings(model);
            model.updateList();
        });
    </script>
}