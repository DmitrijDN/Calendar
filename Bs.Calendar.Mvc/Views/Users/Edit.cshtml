@using Bs.Calendar.Models
@using Roles = Bs.Calendar.Models.Roles
@model Bs.Calendar.Mvc.ViewModels.Users.UserEditVm
@{
    var btnName = "Create";
    var userRoles = Enum.GetValues(typeof (Roles))
        .Cast<Roles>()
        .Where(role => role < Roles.All);
    var userId = 0;
    var isDeleted = false;

    if (Model != null && Model.UserId != 0)
    {
        btnName = "Update";
        userId = Model.UserId;
        ViewBag.Title = "Edit User";
        ViewBag.User = Model.FirstName + " " + Model.LastName;

        isDeleted = Model.Live == LiveStatuses.Deleted;
    }
    else
    {
        ViewBag.Title = "Create User";
        ViewBag.User = "New User";
    }
}

<div class="row">
    <div class="centered seven columns text-center sub-title">
        <h4>@ViewBag.Title</h4>
    </div>
</div>

@using (Html.BeginForm())
{
        @Html.AntiForgeryToken()
        @Html.HiddenFor(user => user.UserId)

        <ul class="two_up tiles">
        
            <li>
@*                <div class="centered seven columns danger alert">
                    @Html.ValidationSummary()
                </div>*@
                <fieldset class="centered seven columns">
                    <legend>
                        <h4>@ViewBag.User</h4>
                    </legend>

                    <ul>
                        <li class="field">
                            @Html.LabelFor(user => user.FirstName, new {@class = "inline three columns"})
                            @Html.TextBoxFor(user => user.FirstName, new {@class = "wide text input"})
                        </li>

                        <li class="field">
                            @Html.LabelFor(user => user.LastName, new {@class = "inline three columns"})
                            @Html.TextBoxFor(user => user.LastName, new {@class = "wide text input"})
                        </li>

                        <li class="field">
                            @Html.LabelFor(user => user.Email, new {@class = "inline three columns"})
                            @Html.TextBoxFor(user => user.Email, new {@class = "wide text input"})
                        </li>

                        <li class="field">
                            @Html.LabelFor(user => user.BirthDate, new {@class = "inline three columns"})
                            @Html.CustomDateEditor(user => user.BirthDate)
                        </li>

                        <li class="field">
                            @Html.LabelFor(user => user.Role, new {@class = "inline three columns"})
                            <div class="picker">
                                @Html.DropDownListFor(user => user.Role, new SelectList(userRoles))
                            </div>
                        </li>
                        @if (userId != 0)
                        {
                            <li>
                                <label class="inline  three columns">Deleted</label>
                                @Html.CheckBox("deleted", isDeleted)
                            </li>
                        }
                    </ul>
                </fieldset>
                <div class="centered seven columns">
                    <div class="medium secondary btn three columns">
                        <input type="submit" value="@btnName"/>
                    </div>

                    <div class="medium default btn push_one three columns">
                        @Html.ActionLink("Back", "Index")
                    </div>
                
                    @if (Model.ApproveState == ApproveStates.NotApproved)
                    {
                        <div class="medium warning btn push_one three columns">
                            @Html.ActionLink("Approve", "ApproveUser", Model)
                        </div>
                    }
                </div>
            </li>
            <li>
                @Html.Partial("UserContacts")
            </li>
        </ul>
}

@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

    <script src="../../Scripts/Users/UserContacts.js"></script>

    <script type="text/javascript"> 
        $(document).ready(function () {
            ko.applyBindings(new UserContactsVm(@Html.RawJson(@Model.Contacts)));
        });
    </script>
}
