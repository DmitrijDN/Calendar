@model Bs.Calendar.Mvc.ViewModels.UserEditVm
@{
    var userRoles = (from object role in Enum.GetValues(typeof (Bs.Calendar.Models.Roles)) select role.ToString()).ToList();
    var userId = 0;
    var btnName = "Create";
    
    if (Model != null && Model.UserId != 0)
    {
        userId = Model.UserId;
        ViewBag.Title = "Edit User";
        btnName = "Update";
        ViewBag.User = Model.FirstName + " " + Model.LastName;
    }
    else
    {
        ViewBag.Title = "Create User";
        ViewBag.User = "New User";
    }
}

<div class="row">
    <div class="centered seven columns">
        <h3>@ViewBag.Title</h3>
    </div>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    @Html.HiddenFor(x => x.UserId)

    <div class="row">
        <fieldset class="centered seven columns">
            <legend>
                <h4>@ViewBag.User</h4>
            </legend>

            <ul>
                <li class="field">
                    @Html.LabelFor(user => user.FirstName, new {@class = "inline"})
                    @Html.TextBoxFor(user => user.FirstName, new {@class = "wide text input"})
                    @Html.ValidationMessageFor(user => user.FirstName)
                </li>

                <li class="field">
                    @Html.LabelFor(user => user.LastName, new {@class = "inline"})
                    @Html.TextBoxFor(user => user.LastName, new {@class = "wide text input"})
                    @Html.ValidationMessageFor(user => user.LastName)
                </li>

                <li class="field">
                    @Html.LabelFor(user => user.Email, new {@class = "inline"})
                    @Html.TextBoxFor(user => user.Email, new {@class = "wide text input"})
                    @Html.ValidationMessageFor(user => user.Email)
                </li>

                <li class="field">
                    @Html.LabelFor(user => user.Role, new {@class = "inline"})
                    <div class="picker">
                        @Html.DropDownListFor(user => user.Role, new SelectList(userRoles))
                    </div>
                </li>
            </ul>

            <div class="medium secondary btn three columns">
                <input type="submit" value=@btnName />
            </div>

            <div class="medium default btn push_one three columns">
                @Html.ActionLink("Back", "Index")
            </div>
            
            @if (userId != 0)
            {
                <div class="medium info btn three columns push_one">
                    @Html.ActionLink("Delete", "Delete", new {id = userId})
                </div>
                }  
        </fieldset>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
@section styles {
    <link href="@Url.Content("~/Content/User/user-edit.css")" rel="stylesheet"/>
}