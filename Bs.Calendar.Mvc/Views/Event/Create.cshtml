@model Bs.Calendar.Mvc.ViewModels.Events.CalendarEventVm
@{
    ViewBag.Title = "Create Event";
}

<form>
    <div class="row" id="calendar-event">
        <div class="row">
            <div class="medium info btn six columns event-btn1"><a href="#">Personal Event</a></div>
            <div class="medium default btn six columns event-btn2"><a href="#">Meeting Event</a></div>
        </div>
        <br/>
        
        <div class="centered five columns text-center invisible-onstart">
            @Html.ValidationSummary("", new {@class = "warning alert", data_bind = "visible : isError()"})
        </div>

        <div class="row field">
            <div class="four columns">
                @Html.LabelFor(eventModel => eventModel.Title)
                @Html.TextBoxFor(eventModel => eventModel.Title, new { @class = "text input columns", data_bind = "value : eventModel.Title", placeholder = "Event Title" })
            </div>
            <div class="four columns field invisible-onstart" data-bind="visible: eventModel.EventType() != 1 && roomOptions.isRoomDefined">
                <label>Room</label>
                <input class="text input" type="text" data-bind="value: roomOptions.roomText" disabled>
            </div>
        </div>
        
        <div class="row field">
            <label>Time Period</label>
            <input id="date" class="text input date four columns" type="date" data-bind="event: { input: dateTime.dateInput.dateChanged }, attr: { value: dateTime.dateInput.value(), min: dateTime.dateInput.min }" />
            <div class="four columns">
                <div data-bind="attr: {class: eventModel.EventType() != 1 ? 'prepend append double field' : 'field' }">
                    <input id="fromTime" class="text input timeInput" type="text" placeholder="from" data-bind="value: dateTime.fromInput.value, attr: { disabled: eventModel.EventType() != 1 && dateTime.IsAllDay() }, event: { change: dateTime.fromInput.timeChanged, timeFormatError: dateTime.fromInput.timeChanged, changeTime: dateTime.fromInput.timeChanged }" />
                    <input id="toTime" class="text input timeInput" type="text" placeholder="to" data-bind="visible: eventModel.EventType() != 1, value: dateTime.toInput.value, attr: { disabled: dateTime.IsAllDay() }, event: { change: dateTime.toInput.timeChanged, timeFormatError: dateTime.toInput.timeChanged, changeTime: dateTime.toInput.timeChanged }" />
                </div>
            </div>
            <label id="isAllDay" class="checkbox three columns" data-bind="visible: eventModel.EventType() != 1, event: {'gumby.onChange': function(context, event){dateTime.IsAllDay($(event.target).hasClass('checked'));}}">
                <span></span> All day
            </label>
        </div>
    
        <div class="row">
            <div class="nine columns field">
                @Html.LabelFor(eventModel => eventModel.Text)
                @Html.TextAreaFor(eventModel => eventModel.Text, 2, 1, new { @class = "input textarea", data_bind = "value: eventModel.Text", placeholder = "Event Text"})
            </div>
            
        </div>
       
    
        <div class="row invisible-onstart" data-bind="visible: eventModel.EventType() == 2">
            <div class="row" >
                <div class="nine columns">
                    <div class="medium default btn metro rounded icon-right icon-user-add four columns" data-bind="click: subscribers.showUserList"><a href="#">Add Users</a></div>
                    <div class="medium warning btn metro rounded icon-right icon-users four columns calendar-addteam-btn" data-bind="click: subscribers.showTeamList"><a href="#">Add Teams</a></div>
                    <div class="medium default btn metro rounded icon-right icon-home four columns calendar-chooseroom-btn" data-bind="click: subscribers.displayRoomOrderList"><a href="#">Choose Room</a></div>
                </div>
            </div>
            <br/>

            <div class="row">
                <ul class="four_up tiles calendar-event-user" data-bind="foreach: eventModel.Users">
                    <li>
                        <span data-bind="text: FullName"></span>
                        <i class="icon-cancel-squared pull_right" data-bind="click: $root.subscribers.removeUser"></i>
                    </li>
                </ul>
            </div>
    
            <div class="row">
                <ul class="four_up tiles calendar-event-team" data-bind="foreach: eventModel.Teams">
                    <li>
                        <span data-bind="text: Name"></span>
                        <i class="icon-cancel-squared pull_right" data-bind="click: $root.subscribers.removeTeam"></i>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    
    @Html.Partial("UserColumnList")
    @Html.Partial("SimpleTeamList")
    @Html.Partial("RoomOrderList")

    <br/>
    <div class="row">
        <div class=" push_three medium secondary btn two columns">
            <input type="submit" value="Create">
        </div>
        
        <div class="medium default btn push_one two columns">
            <a href="#">Back</a>
        </div>
    </div>
</form>

@section scripts
{
    <script type="text/javascript">
        $(document).ready(function () {
            
            window.calendarEventVm = new CalendarEventVm(@Html.RawJson(@Model));
            ko.applyBindings(calendarEventVm.subscribers.userColumnVm, document.getElementById("user-column-list"));
            ko.applyBindings(calendarEventVm.subscribers.simpleTeamListVm, document.getElementById("simple-team-list"));
            ko.applyBindings(calendarEventVm, document.getElementById("calendar-event"));
            ko.applyBindings(new RoomOrderListVm(), document.getElementById("room-order-list"));

            $("[class*=event-btn]").click(function () { calendarEventVm.setEventType(this); });
            $(".invisible-onstart").removeClass("invisible-onstart");
        });
    </script>
}



